import com.github.spotbugs.snom.Effort
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
	id 'checkstyle'
	id 'com.github.spotbugs' version '6.0.4'
	id 'org.owasp.dependencycheck' version '9.0.1'
	id 'org.flywaydb.flyway' version '9.22.3'
}

// Build info for actuator

flyway {
       url = "jdbc:postgresql://localhost:5432/${System.getenv('POSTGRES_DB') ?: 'moviedb'}"
       user = System.getenv('POSTGRES_USER') ?: 'movieuser'
       password = System.getenv('POSTGRES_PASSWORD') ?: 'moviepass'
	schemas = ['public']
	locations = ['filesystem:src/main/resources/db/migration']
}
springBoot {
	buildInfo()
}

// Enable resource filtering for application.properties
processResources {
	def projectName = project.name
	def projectVersion = project.version.toString()
	def projectDescription = project.description ?: 'A REST API for managing movies built with Spring Boot'
	
	filesMatching('application.properties') {
		filter { line ->
			line.replace('${project.name}', projectName)
				.replace('${project.version}', projectVersion)
				.replace('${project.description}', projectDescription)
		}
	}
}

// Checkstyle configuration
checkstyle {
	toolVersion = '10.15.0'
	configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
	maxWarnings = 0
}

// SpotBugs configuration
spotbugs {
	toolVersion = '4.7.3'
	effort = Effort.MAX
	excludeFilter = file("${rootDir}/config/spotbugs/exclude.xml")
	ignoreFailures = true
}

spotbugsMain {
	reports {
		html {
			required = true
			outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
			stylesheet = 'fancy-hist.xsl'
		}
		xml {
			required = true
			outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.xml")
		}
	}
}

spotbugsTest {
	reports {
		html {
			required = true
			outputLocation = file("$buildDir/reports/spotbugs/test/spotbugs.html")
			stylesheet = 'fancy-hist.xsl'
		}
		xml {
			required = true
			outputLocation = file("$buildDir/reports/spotbugs/test/spotbugs.xml")
		}
	}
}

// OWASP Dependency Check configuration
dependencyCheck {
	formats = ['HTML', 'JSON', 'SARIF']
	suppressionFile = file("${rootDir}/config/dependency-check/suppressions.xml")
	failBuildOnCVSS = 7
}

group = 'com.movieapi'
version = '0.0.1-SNAPSHOT'
description = 'A REST API for managing movies built with Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
	
	// Configure JVM arguments for Mockito inline mock maker
	jvmArgs = [
		'-XX:+EnableDynamicAgentLoading',
		'-Djdk.instrument.traceUsage=false',
		'-javaagent:' + configurations.testRuntimeClasspath.find { it.name.contains('byte-buddy-agent') }
	]
	
	// Configure test output
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
		showExceptions = true
		showCauses = true
		showStackTraces = true
		exceptionFormat = "full"
		
		// Show individual test results
		afterSuite { desc, result ->
			if (!desc.parent) { // will match the outermost suite
				def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
				def startItem = '|  ', endItem = '  |'
				def repeatLength = startItem.length() + output.length() + endItem.length()
				println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
			}
		}
	}
	
	// Generate JaCoCo test report
	finalizedBy jacocoTestReport
}

// JaCoCo configuration
jacoco {
	toolVersion = "0.8.13"
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
		csv.required = false
	}
	
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				'**/MovieManagementApiApplication.class',
				'**/entity/**',
				'**/dto/**',
				'**/config/**'
			])
		}))
	}
}

jacocoTestCoverageVerification {
	dependsOn jacocoTestReport
	violationRules {
		rule {
			limit {
				minimum = 0.80 // 80% minimum coverage
			}
		}
		rule {
			element = 'CLASS'
			excludes = [
				'com.movieapi.MovieManagementApiApplication',
				'com.movieapi.entity.*',
				'com.movieapi.dto.*',
				'com.movieapi.config.*'
			]
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.75 // 75% minimum coverage per class
			}
		}
	}
}
