plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
}

// Build info for actuator
springBoot {
	buildInfo()
}

// Enable resource filtering for application.properties
processResources {
	filesMatching('application.properties') {
		filter { line ->
			line.replace('${project.name}', project.name)
				.replace('${project.version}', project.version.toString())
				.replace('${project.description}', project.description ?: 'A REST API for managing movies built with Spring Boot')
		}
	}
}

group = 'com.movieapi'
version = '0.0.1-SNAPSHOT'
description = 'A REST API for managing movies built with Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(24)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'com.h2database:h2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
	
	// Configure test output
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
		showExceptions true
		showCauses true
		showStackTraces true
		exceptionFormat "full"
		
		// Show individual test results
		afterSuite { desc, result ->
			if (!desc.parent) { // will match the outermost suite
				def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
				def startItem = '|  ', endItem = '  |'
				def repeatLength = startItem.length() + output.length() + endItem.length()
				println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
			}
		}
	}
}
