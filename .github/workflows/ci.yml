name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true
  JAVA_OPTS: -Xmx2g

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'gradle'
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build --no-daemon
    - name: Run tests
      run: ./gradlew test --no-daemon
    - name: Generate JaCoCo coverage report
      run: ./gradlew jacocoTestReport --no-daemon
    - name: Verify code coverage
      run: ./gradlew jacocoTestCoverageVerification --no-daemon
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          build/reports/tests/
          build/test-results/
        retention-days: 30
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: build/reports/jacoco/
        retention-days: 30
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: build-artifacts
        path: build/libs/
        retention-days: 30

  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'gradle'
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Run Checkstyle
      run: ./gradlew checkstyleMain checkstyleTest --no-daemon
    - name: Run SpotBugs
      run: ./gradlew spotbugsMain spotbugsTest --no-daemon
    - name: Run dependency check
      run: ./gradlew dependencyCheckAnalyze --no-daemon

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build Docker image
      run: docker build -t movie-management-api:${{ github.sha }} .
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container -p 8080:8080 movie-management-api:${{ github.sha }}
        sleep 30
        curl -f http://localhost:8080/actuator/health || exit 1
        docker stop test-container
    - name: Upload Docker image
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: |
          Dockerfile
          docker-compose.yml
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [build-and-test, quality-checks, docker-build, security-scan]
    if: always()
    steps:
    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ CI/CD Pipeline failed!"
        echo "Check the workflow run for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
    - name: Notify on success
      if: success()
      run: |
        echo "✅ CI/CD Pipeline completed successfully!"
        echo "Build artifacts and reports are available in the workflow run." 