---
name: Reusable CI Steps
on:
  workflow_call:
    inputs:
      job:
        required: true
        type: string
    secrets:
      DB_PASSWORD:
        required: true
      ADMIN_PASSWORD:
        required: true

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true
  JAVA_OPTS: -Xmx2g

jobs:
  call:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: moviedb
          POSTGRES_USER: movieuser
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        options: >-
          --health-cmd "pg_isready -U movieuser -d moviedb"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 10
          --health-start-period 40s
          -p 5432:5432
    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/moviedb
      SPRING_DATASOURCE_USERNAME: movieuser
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}
      SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
      ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Wait for PostgreSQL to be ready
        if: ${{ inputs.job == 'build-and-test' }}
        run: |
          echo "Installing PostgreSQL client..."
          sudo apt-get update && sudo apt-get install -y postgresql-client
          echo "Waiting for PostgreSQL to be ready..."
          # Wait for PostgreSQL to start and be ready
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U movieuser -d moviedb; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Attempt $i: PostgreSQL not ready yet, waiting..."
            sleep 2
          done
          # Final check
          if ! pg_isready -h localhost -p 5432 -U movieuser -d moviedb; then
            echo "‚ùå PostgreSQL failed to start within timeout"
            exit 1
          fi

      - name: Load build artifacts (if needed)
        if: ${{ inputs.job != 'build-and-test' }}
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/

      - name: Set up Docker Buildx
        if: ${{ inputs.job == 'docker-build' }}
        uses: docker/setup-buildx-action@v3

      - name: Run job-specific steps
        run: |
          case "${{ inputs.job }}" in
            build-and-test)
              ./gradlew build test jacocoTestReport \
                jacocoTestCoverageVerification --no-daemon --parallel
              ;;
            quality-checks)
              ./gradlew checkstyleMain spotbugsMain \
                dependencyCheckAnalyze --no-daemon
              ;;
            docker-build)
              docker build -t movie-management-api:${{ github.sha }} .
              # add smoke-test or healthcheck steps here
              ;;
            security-scan)
              ./gradlew dependencyCheckAnalyze --no-daemon
              ;;
            *)
              echo "Unknown job: ${{ inputs.job }}"
              exit 1
              ;;
          esac

      - name: Upload artifacts
        if: ${{ inputs.job == 'build-and-test' }}
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/libs/
